name: Build

on:
  push:
    branches:
      - main
      - release-*
    tags:
      # YYYYMMDD
      - "20[0-9][0-9][0-1][0-9][0-3][0-9]*"
  schedule:
    - cron: "0 0 * * 1"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_LOG: info,libp2p=off,node=error
  CARGO_TERM_COLOR: always
  DOCKER_PLATFORMS: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}

jobs:
  build:
    runs-on: buildjet-8vcpu-ubuntu-2204
    outputs:
      binaries: ${{ steps.list_binaries.outputs.binaries }}
    steps:
      - uses: rui314/setup-mold@v1

      - name: Install just command runner
        run: |
          sudo snap install --edge --classic just
          just --version

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-rust
          cache-provider: buildjet

      - name: Build
        # Build in release without `testing` feature, this should work without `hotshot_example` config.
        run: cargo build --locked --release --workspace

      - name: Build Espresso Dev Node
        # Espresso Dev Node currently requires testing feature, so it is built separately.
        run: cargo build --locked --release --features testing --bin espresso-dev-node

      - name: List Binaries
        id: list_binaries
        run: |
          echo 'binaries<<EOF' >> $GITHUB_OUTPUT
          find target/release/ -maxdepth 1 -perm -111 -type f >> $GITHUB_OUTPUT
          echo EOF >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: x86_64-unknown-linux-gnu-services
          path: ${{ steps.list_binaries.outputs.binaries }}

  build-arm:
    if: github.event_name != 'pull_request'
    runs-on: buildjet-8vcpu-ubuntu-2204-arm
    env:
      CARGO_BUILD_JOBS: '6'
    steps:
      - uses: rui314/setup-mold@v1

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          cache-provider: buildjet

      - name: Build
        run: |
          cargo build --locked --release --workspace

      - name: Build Espresso Dev Node
        # Espresso Dev Node currently requires testing feature, so it is built separately.
        run: |
          cargo build --locked --release --features testing --bin espresso-dev-node

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aarch64-unknown-linux-gnu-services
          path: |
            target/release/orchestrator
            target/release/cdn-broker
            target/release/cdn-marshal
            target/release/cdn-whitelist
            target/release/state-relay-server
            target/release/state-prover
            target/release/sequencer
            target/release/cli
            target/release/submit-transactions
            target/release/reset-storage
            target/release/utils
            target/release/deploy
            target/release/keygen
            target/release/permissionless-builder
            target/release/nasty-client
            target/release/espresso-dev-node
            target/release/pub-key
            target/release/espresso-bridge
            target/release/marketplace-solver
            target/release/marketplace-builder
            target/release/node-metrics
            target/release/dev-rollup

  build-dockers:
    runs-on: ubuntu-latest
    needs: [build, build-arm]
    strategy:
      matrix:
        package: $(jq -c -n '$ARGS.positional' --args "${needs.build.outputs.binaries[@]}")
    # if build_arm is skipped, run this job anyway
    if: ${{ !(failure() || cancelled()) }}
    outputs:
      tag: ${{ steps.sequencer.outputs.tags }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download executables AMD
        uses: actions/download-artifact@v4
        with:
          name: x86_64-unknown-linux-gnu-services
          path: target/amd64/release

      - name: Download executables ARM
        if: github.event_name != 'pull_request'
        uses: actions/download-artifact@v4
        with:
          name: aarch64-unknown-linux-gnu-services
          path: target/arm64/release

      - name: Setup Docker BuildKit (buildx)
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Repo
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate ${{matrix.package}} docker metadata
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/${{matrix.package}}

      - name: Build and push sequencer docker
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./docker/${{matrix.package}}.Dockerfile
          platforms: ${{ env.DOCKER_PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

  test-demo:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [build-dockers]
    steps:
      - name: Install just command runner
        run: |
          sudo snap install --edge --classic just
          just --version

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Pull docker images
        run: |
          docker pull ${{ needs.build-dockers.outputs.sequencer-tag }}
          docker pull ${{ needs.build-dockers.outputs.cdn-broker-tag }}
          docker pull ${{ needs.build-dockers.outputs.cdn-marshal-tag }}
          docker pull ${{ needs.build-dockers.outputs.cdn-whitelist-tag }}
          docker pull ${{ needs.build-dockers.outputs.state-relay-server-tag }}
          docker pull ${{ needs.build-dockers.outputs.prover-service-tag }}
          docker pull ${{ needs.build-dockers.outputs.orchestrator-tag }}
          docker pull ${{ needs.build-dockers.outputs.submit-transactions-tag }}
          docker pull ${{ needs.build-dockers.outputs.deploy-tag }}
          docker pull ${{ needs.build-dockers.outputs.builder-tag }}
          docker pull ${{ needs.build-dockers.outputs.nasty-client-tag }}
          docker pull ${{ needs.build-dockers.outputs.bridge-tag }}
          docker pull ${{ needs.build-dockers.outputs.marketplace-solver-tag }}
          docker pull ${{ needs.build-dockers.outputs.marketplace-builder-tag }}
          docker pull ${{ needs.build-dockers.outputs.node-validator-tag }}
          docker pull ${{ needs.build-dockers.outputs.dev-rollup-tag }}
          
      - name: Tag new docker images
        run: |
          docker tag ${{ needs.build-dockers.outputs.sequencer-tag }} ghcr.io/espressosystems/espresso-sequencer/sequencer:main
          docker tag ${{ needs.build-dockers.outputs.cdn-broker-tag }} ghcr.io/espressosystems/espresso-sequencer/cdn-broker:main
          docker tag ${{ needs.build-dockers.outputs.cdn-marshal-tag }} ghcr.io/espressosystems/espresso-sequencer/cdn-marshal:main
          docker tag ${{ needs.build-dockers.outputs.cdn-whitelist-tag }} ghcr.io/espressosystems/espresso-sequencer/cdn-whitelist:main
          docker tag ${{ needs.build-dockers.outputs.state-relay-server-tag }} ghcr.io/espressosystems/espresso-sequencer/state-relay-server:main
          docker tag ${{ needs.build-dockers.outputs.prover-service-tag }} ghcr.io/espressosystems/espresso-sequencer/prover-service:main
          docker tag ${{ needs.build-dockers.outputs.orchestrator-tag }} ghcr.io/espressosystems/espresso-sequencer/orchestrator:main
          docker tag ${{ needs.build-dockers.outputs.submit-transactions-tag }} ghcr.io/espressosystems/espresso-sequencer/submit-transactions:main
          docker tag ${{ needs.build-dockers.outputs.deploy-tag }} ghcr.io/espressosystems/espresso-sequencer/deploy:main
          docker tag ${{ needs.build-dockers.outputs.builder-tag }} ghcr.io/espressosystems/espresso-sequencer/builder:main
          docker tag ${{ needs.build-dockers.outputs.nasty-client-tag }} ghcr.io/espressosystems/espresso-sequencer/nasty-client:main
          docker tag ${{ needs.build-dockers.outputs.bridge-tag }} ghcr.io/espressosystems/espresso-sequencer/bridge:main
          docker tag ${{ needs.build-dockers.outputs.marketplace-solver-tag }} ghcr.io/espressosystems/espresso-sequencer/marketplace-solver:main
          docker tag ${{ needs.build-dockers.outputs.marketplace-builder-tag }} ghcr.io/espressosystems/espresso-sequencer/marketplace-builder:main
          docker tag ${{ needs.build-dockers.outputs.node-validator-tag }} ghcr.io/espressosystems/espresso-sequencer/node-validator:main
          docker tag ${{ needs.build-dockers.outputs.dev-rollup-tag }} ghcr.io/espressosystems/espresso-sequencer/dev-rollup:main

      - name: Test docker demo
        run: |
          just demo &
          set -o pipefail
          timeout -v 600 scripts/smoke-test-demo | sed -e 's/^/smoke-test: /;'
