#!/usr/bin/env bash
if [[ "$(uname -s)" != "Linux" ]]; then
  echo "This script only works on Linux."
  echo "On macOS, use scripts/build-docker-images-native instead."
  exit 1
fi

set -euxo pipefail

nix develop .#crossShell --ignore-environment --command bash -c "cargo build --release \
&& cargo build --release --manifest-path ./sequencer-sqlite/Cargo.toml \
&& cargo build --bin espresso-dev-node --release --features='testing embedded-db'"

nix develop .#armCrossShell --ignore-environment --command bash -c "cargo build --release \
&& cargo build --release --manifest-path ./sequencer-sqlite/Cargo.toml \
&& cargo build --bin espresso-dev-node --release --features='testing embedded-db'"

# The rest of the script doesn't run in a nix shell but we need to know where
# the binaries are.
CARGO_TARGET_DIR="./target/nix"

# Copy binaries to a temporary directory.
WORKDIR=$(mktemp -d -t espresso-docker-build-XXXXXXXX)

trap "exit" INT TERM
trap cleanup EXIT
cleanup(){
    rm -rfv ${WORKDIR}
}

# Copy data files to Docker context.
mkdir -p ${WORKDIR}/data
cp -rv data/genesis ${WORKDIR}/data/

for ARCH in "amd64" "arm64"; do
  case "$ARCH" in
    amd64)
      TARGET=x86_64-unknown-linux-musl
      ;;
    arm64)
      TARGET=aarch64-unknown-linux-musl
      ;;
    *)
      echo "Unknown arch: $ARCH"
      exit 1
      ;;
  esac
  mkdir -p ${WORKDIR}/target/$ARCH/release
    for binary in "cdn-broker" "cdn-marshal" "cdn-whitelist" "deploy" "dev-rollup" "espresso-bridge" "espresso-dev-node" "keygen" "marketplace-builder" "marketplace-solver" "nasty-client" "update-permissioned-stake-table" "node-metrics" "orchestrator" "permissionless-builder" "pub-key" "reset-storage" "sequencer" "sequencer-sqlite" "state-prover" "state-relay-server" "submit-transactions" "utils"; do
    cp -v "${CARGO_TARGET_DIR}/${TARGET}/release/$binary" ${WORKDIR}/target/$ARCH/release
  done
done

mkdir -p ${WORKDIR}/docker/scripts
cp -v docker/scripts/sequencer-awssecretsmanager.sh ${WORKDIR}/docker/scripts

# Copy the dev-node and sequencer script
mkdir -p ${WORKDIR}/scripts
cp -v scripts/{launch-dev-node-with-postgres,sequencer-entrypoint} ${WORKDIR}/scripts

export DOCKER_BUILDKIT=1
docker build -t ghcr.io/espressosystems/espresso-sequencer/orchestrator:main -f docker/orchestrator.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/cdn-broker:main -f docker/cdn-broker.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/cdn-marshal:main -f docker/cdn-marshal.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/cdn-whitelist:main -f docker/cdn-whitelist.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/state-relay-server:main -f docker/state-relay-server.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/prover-service:main -f docker/prover-service.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/sequencer:main -f docker/sequencer.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/submit-transactions:main -f docker/submit-transactions.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/deploy:main -f docker/deploy.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/builder:main -f docker/permissionless-builder.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/nasty-client:main -f docker/nasty-client.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/update-permissioned-stake-table:main -f docker/update-permissioned-stake-table.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/espresso-dev-node:main -f docker/espresso-dev-node.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/bridge:main -f docker/espresso-bridge.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/marketplace-solver:main -f docker/marketplace-solver.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/marketplace-builder:main -f docker/marketplace-builder.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/node-validator:main -f docker/node-validator.Dockerfile ${WORKDIR}
docker build -t ghcr.io/espressosystems/espresso-sequencer/dev-rollup:main -f docker/dev-rollup.Dockerfile ${WORKDIR}
