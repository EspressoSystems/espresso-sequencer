# Copyright (c) 2022 Espresso Systems (espressosys.com)
# This file is part of the HotShot Query Service library.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not,
# see <https://www.gnu.org/licenses/>.

[meta]
FORMAT_VERSION = "0.1.0"
NAME = "explorer"
DESCRIPTION = """
HotShot chain state

The explorer API provides data from the storage layer node as-is without attempting to fill in the
missing pieces.  In this way it acts as a snapshot of the _current_ state, and isn't concerned about
having data missing from the overall picture.  Instead, it is more concerned with being able to
retrieve data from the stored state as quickly as possible, and with a relatively simple path
structure that is beneficial for caching solutions.

This `API` is entirely a `REST API` utilizing only the `GET` verb.  The responses returned from this
`API` adhere to the `application/json` `MIME` type.  All `JSON` responses have the potential to return
an error in the event that an error occurs.  In the case of any error, the `HTTP` `Status Code` should
reflect an non ok status.  In addition the object returned will contain details about the error in
question.  As such, the object structure itself should be enough to determine whether the response
was a success or an error.

All Errors returned by this `API` should take on the following form:
```
{
    "error": Error
}
```

Where the `Error` type has, at a minimum, the following fields:
```
{
    "code": string,
    "message": string
}
```

Any error returned **SHOULD** contain these fields at a minimum, and may included some addition fields
for direct reference.  Each `Error` type **MUST** be uniquely identifiable based on the `code` field
alone.  The `message` is included for convenience to explain the error so that the user does not need
to look it up.

"""

[route.get_block_detail]
PATH = ["block/:height", "block/hash/:hash"]
":height" = "Integer"
":hash" = "TaggedBase64"
DOC = """
Get details concerning the block based on it's position in the block chain.  The position is derived
either from the given `height` or a `hash` that should uniquely identify the desired `block`.

Returns
```
{
    "block_detail": BlockDetail
}
```
"""

[route.get_block_summaries]
PATH = ["blocks/latest/:limit", "blocks/:from/:limit"]
":limit" = "Integer"
":from" = "Integer"
DOC = """
Retrieve up to the desired `limit` of Block Summaries.  This endpoint will target the `Block` identified
by either `:from` or `latest`, and should return up to the previous `:limit` of Block Summaries.


Returns
```
{
    "block_summaries": BlockSummary[]
}
```
"""

[route.get_transaction_detail]
PATH = ["transaction/:height/:offset", "transaction/hash/:hash"]
":height" = "Integer"
":offset" = "Integer"
":hash" = "TaggedBase64"
DOC = """
Get the details concerning the individual transaction that is identified by the request.  The transaction
**SHOULD** be uniquely identified by the given `height`, and `offset` or by the given `hash`. 

Returns
```
{
    "transaction_detail": TransactionDetail
}
```
"""

[route.get_transaction_summaries]
PATH = ["transactions/latest/:limit", "transactions/from/:height/:offset/:limit", "transactions/hash/:hash/:limit", "transactions/latest/:limit/block/:block", "transactions/from/:height/:offset/:limit/block/:block", "transactions/hash/:hash/:limit/block/:block", "transactions/latest/:limit/namespace/:namespace", "transactions/from/:height/:offset/:limit/namespace/:namespace", "transactions/hash/:hash/:limit/namespace/:namespace"]
":limit" = "Integer"
":height" = "Integer"
":offset" = "Integer"
":hash" = "TaggedBase64"
":block" = "Integer"
":namespace" = "Integer"
DOC = """
Retrieve up to the desired `limit` of Transaction Summaries. This endpoint will target the `Transaction` that is
identified by `latest`, the `:height` and `:offset`, or the `:hash`.  It should return up to the previous `:limit`
of Transaction Summaries.  The term `latest` **SHOULD** refer to the last `Transaction` within the highest `Block`.

Returns
```
{
    "transaction_summaries": <TransactionSummary>[]
}
```
"""

[route.get_explorer_summary]
PATH = ["explorer-summary"]
DOC = """
Returns
```
{
    "explorer_summary": ExplorerSummary
}
```
"""

[route.get_search_result]
PATH = ["search/:query"]
":query" = "TaggedBase64"
DOC = """
Retrieve search results for blocks or transactions that can be identified in some what by the given string ":query".
At the moment the only field this matches against is the hash of the Block or Transaction.

Returns
```
{
    "search_result": SearchResult
}
```
"""