# Copyright (c) 2022 Espresso Systems (espressosys.com)
# This file is part of the HotShot Query Service library.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not,
# see <https://www.gnu.org/licenses/>.

[meta]
FORMAT_VERSION = "0.1.0"
NAME = "hotshot-state"
DESCRIPTION = """
Query snapshot of merklized state.

The state API provides an interface for serving queries against arbitrarily old snapshots of the state. This allows a full Merkle tree to be reconstructed from storage. However, if any parent state is missing then the partial snapshot can not be queried.
"""

[route.get_path]
PATH = ["/:height/:key", "commit/:commit/:key"]
":height" = "Integer"
":key" = "Literal"
":commit" = "TaggedBase64"
DOC = """
The endpoint offers two methods to query: by block height or by the tree's commitment.

GET /:height/:key
Retrieves the Merkle Path for the membership proof of a leaf based on the block height and entry index.
Parameters:
:height : The block height of the snapshot.
:key : The index of the entry in the Merkle tree.


GET /commit/:commit/:key
Retrieves the Merkle Path for the membership proof of a leaf based on the Merkle tree commitment.
Parameters:
:commit : The merkle tree commitment
:key : The index of the entry in the Merkle tree.
"""

[route.get_height]
PATH = ["/block-height"]
DOC = """
The latest block height for which the merklized state is available.

Note that this may be less than the block height indicated by other APIs, such as `status` or
`node`, since the merklized state storage is updated asynchronously.
"""
